#!/bin/enc python3

from Crypto.Util.number import *
import Crypto
from Crypto.PublicKey import RSA
import base64


def generatorKey(q,p,e):
	n = q*p 
	phi = (q-1)*(p-1)
	d = inverse(e,phi)
	k = RSA.construct((n,e,d,p,q))
	print("PrivateKey = ",k.exportKey())
	k = RSA.construct((n,e))

	print("PublicKey = ",k.exportKey())




def encrypt(q,p,e):
	n = q*p 
	mess = input("Enter your message: ")
	print("Message : ",mess)
	m = bytes_to_long(bytes(mess, 'utf-8'))
	c =  pow(m,e,n)
	print("Cipher : ", c)

def decrypt(q,p,e):
	c = int(input("Enter your cipher: "))
	n = q*p 
	phi = (q-1)*(p-1)
	d = inverse(e,phi)
	m = pow(c,d,n)
	print("Your message : ", long_to_bytes(m))

def option():
	optionn = """
		#########################
		#    RSA version 1.0    #
		#      	  Malware       #
		#                       #
		#########################



	List of the option:

		1. Ecrypt
		2. Decrypt
		3. Exit

"""
	while True:
		print(optionn)
		a = input("Enter your option :")
		if(a == '1'):
			encrypt(q,p,e)  
		elif(a == '2'):
			decrypt(q,p,e)
		elif (a == '3'):
			exit()
		else:
			print("Wrong option!!")

            



if __name__ == '__main__':

	q = 240235037993086647490360091251920509660926008787784163933134217892938306866733942789677346753386227305733054945882967240289722901543973488715609201686292184661845932338700104193843036687863902362262743558762135191383008370605906319072352806840967443808455667223189470493469726348267326087313303773058894562037
	p = 273067835270880086905225991495379768025497181071655465691068234751894433419924689398578343149876505032891110212422075482294849988417876098468455656340271714411918145829343178315564694346337087829483997746033122936265729805143582391157953230943745740375876718066059315171626227510845447370568918599985468283447
	e = 31186400897019474935110647285445503673131446580681275776311671951414114788622345838774311877965990786720764658784947421898983517760738477784602362371051561562206808351224503093181667456617648598165647915091757078611302190825934535904283579772712691438112230134828980258111970295516689690256373292215340475163958923723790536805165847711775268441953305309821252180479573636847217520184023025127620891001593596764466667387987683667801953315782130313468664428515728986226452261450588569245373362702725469848655817202090205940445626402571508469590603334162227644680600619967899413710405809040986903674088539812272861821091
	generatorKey(q,p,e)
	option()

	
	
	



	